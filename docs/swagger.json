{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Water track",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "Application for monitoring water consumption"
  },
  "servers": [
    {
      "url": "https://warettrack.onrender.com"
    }
  ],
  "security": [],
  "tags": [
    {
      "name": "Auth with Google",
      "description": "Auth operations with Google."
    },
    {
      "name": "Authentication",
      "description": "Operations about Authentication."
    },
    {
      "name": "User",
      "description": "Operations about User."
    },
    {
      "name": "Common",
      "description": "Getting general information"
    },
    {
      "name": "Water",
      "description": "Operations about Water."
    }
  ],
  "paths": {
    "/api/auth/confirm-oauth": {
      "post": {
        "tags": [
          "Auth with Google"
        ],
        "summary": "Confirm Google OAuth",
        "operationId": "confirmOauth",
        "description": "Confirms the authorization code from Google and logs in or registers the user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "code"
                ],
                "properties": {
                  "code": {
                    "type": "string",
                    "example": "4/0AeanS0ZLEXUstNXz4C_YhjBUuXjuK2FU2ByuHdKguGv0ek3hJePKOYRz3uO-Ei2zP3hp8w"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in via Google OAuth!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Login with Google successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken",
                        "refreshToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "IMVpPn7diaNqRgUIaY8OBOCXES8SO98iD1Bk3oxv"
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "87H7TmCUeY9zDFXt/nn/IWL/5iOzJR/6//KdZIYD"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing code."
          },
          "401": {
            "description": "Invalid Google account or code."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/auth/get-oauth-url": {
      "get": {
        "tags": [
          "Auth with Google"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "getOAuthURL",
        "description": "Returns the URL for initiating Google OAuth login.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get Google OAuth url",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get Google OAuth url"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "url"
                      ],
                      "properties": {
                        "url": {
                          "type": "string",
                          "example": "https://accounts.google.com/o/oauth2/v2/auth?scope=email&response_type=code&client_id=your-client-id&redirect_uri=your-redirect-uri"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "Register a new user in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "User registration data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com",
                    "description": "The email address of the user. Must be a valid email format. **Validation rules:** - Must follow email format - Cannot contain spaces\n",
                    "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "format": "password",
                    "example": "securePassword123",
                    "description": "The password for the account. **Validation rules:** - Minimum 6 characters long\n"
                  },
                  "language": {
                    "type": "string",
                    "enum": [
                      "en",
                      "de",
                      "ua"
                    ],
                    "example": "en",
                    "description": "Optional language preference. Supported values: en (English), de (German), ua (Ukrainian)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "User registered successfully!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "email"
                      ],
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email",
                          "example": "john@example.com",
                          "description": "User's email address"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing parameters in the request body",
            "$ref": "#/components/responses/400"
          },
          "409": {
            "description": "Conflict - The email is already in use. Please provide a different email address.",
            "$ref": "#/components/responses/409"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login a new user in the system",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "User registration data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john@example.com",
                    "description": "The email address of the user. Must be a valid email format. **Validation rules:** - Must follow email format - Cannot contain spaces\n",
                    "pattern": "^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "format": "password",
                    "example": "securePassword123",
                    "description": "The password for the account. **Validation rules:** - Minimum 6 characters long\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged in successfully!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Logged in successfully!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "UVgfgeaODz8j7Z+mUnfpLoVOHp3UVjFdPlwHklqG",
                          "description": "JWT token for accessing protected resources"
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "UVgfgeaODz8j7Z+mUnfpLoVOHp3UVjFdPlwHklqG",
                          "description": "JWT token for accessing protected resources"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing parameters in the request body",
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Unauthorized - Invalid credentials. This error can occur if the provided email or password is incorrect. Ensure that both the login credentials are accurate.",
            "$ref": "#/components/responses/401_invalidDates"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log out the current user",
        "operationId": "logoutUser",
        "description": "Logs out the currently authenticated user by invalidating their access token. **Important:** You must provide a valid access token to access this resource.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully logged out"
          },
          "401": {
            "description": "Unauthorized - User session is missing.",
            "$ref": "#/components/responses/401_sessionNotFound"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh the access token",
        "operationId": "refreshToken",
        "description": "Refresh the access token using a valid refresh token. **Important:** You must provide a valid refresh token to access this resource.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Refresh token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "refreshToken"
                ],
                "properties": {
                  "refreshToken": {
                    "type": "string",
                    "example": "UVgfgeaODz8j7Z+mUnfpLoVOHp3UVjFdPlwHklqG",
                    "description": "JWT token for accessing protected resources."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Access token refreshed successfully!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "newlyGeneratedAccessToken12345",
                          "description": "JWT token for accessing protected resources"
                        },
                        "refreshToken": {
                          "type": "string",
                          "example": "UVgfgeaODz8j7Z+mUnfpLoVOHp3UVjFdPlwHklqG",
                          "description": "JWT token for accessing protected resources"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - There are multiple reasons for this error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "error": {
                      "type": "string",
                      "enum": [
                        "SessionNotFound",
                        "InvalidRefreshToken",
                        "ExpiredToken"
                      ],
                      "example": "SessionNotFound"
                    },
                    "message": {
                      "type": "string",
                      "example": "User session is missing or invalid."
                    }
                  }
                },
                "examples": {
                  "SessionNotFound": {
                    "summary": "Missing session",
                    "value": {
                      "status": 401,
                      "message": "Session not found."
                    }
                  },
                  "InvalidRefreshToken": {
                    "summary": "Invalid token",
                    "value": {
                      "status": 401,
                      "message": "Invalid refresh token."
                    }
                  },
                  "ExpiredToken": {
                    "summary": "Expired token",
                    "value": {
                      "status": 401,
                      "message": "Refresh token expired."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/request-reset-email": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request Reset Password",
        "operationId": "requestPasswordReset",
        "description": "Generate and send a password reset token to the user's email",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Email for password reset",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com",
                    "description": "User's email address for password reset request. **Validation rules:** - Must be a valid email format - Cannot be empty\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Reset password email was successfully sent!"
                    },
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "description": "Empty object"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/reset-password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset Password",
        "operationId": "resetPassword",
        "description": "Reset user password using a valid reset token",
        "requestBody": {
          "description": "Password reset payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "JWT token received via email for password reset",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "minLength": 8,
                    "description": "New password for the user account. **Validation rules:** - Minimum 8 characters long - Should include a mix of uppercase, lowercase, numbers, and special characters example: 'NewStrongPassword123!'\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password was successfully reset!"
                    },
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "data": {
                      "type": "object",
                      "description": "Empty object"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401_expiredToken"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/current": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get all information about the current user",
        "operationId": "getInformationUser",
        "description": "Get a user by his unique ID. **Important:** You must provide a valid access token to access this resource.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully received",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User information retrieved successfully!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Token is missing or invalid. Make sure to provide a valid bearer token in the Authorization header.",
            "$ref": "#/components/responses/401_expiredToken"
          },
          "404": {
            "description": "User not found - The user you are trying to update does not exist.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/update-current-user": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update user information",
        "operationId": "updateUserInformation",
        "description": "Update information of the current user. **Important:** You must provide a valid access token to access this resource.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "61e9f1f3e7b45c001ddc2e85",
                    "description": "Unique identifier of the user",
                    "minLength": 24,
                    "maxLength": 24,
                    "pattern": "^[a-fA-F0-9]{24}$"
                  },
                  "name": {
                    "type": "string",
                    "example": "John Doe",
                    "description": "The user's updated name (optional)",
                    "minLength": 3,
                    "maxLength": 20
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "john.doe@example.com",
                    "description": "The user's updated email (optional)"
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "woman",
                      "man"
                    ],
                    "example": "man",
                    "description": "The user's updated gender (optional)"
                  },
                  "weight": {
                    "type": "integer",
                    "example": 75,
                    "description": "The user's updated weight in kilograms (optional)",
                    "minimum": 0
                  },
                  "activeTime": {
                    "type": "integer",
                    "example": 1,
                    "description": "The user's daily active time in minutes (optional).",
                    "minimum": 0
                  },
                  "currentDailyNorm": {
                    "type": "integer",
                    "example": 2000,
                    "description": "The user's updated daily water intake norm in milliliters (optional)",
                    "minimum": 500,
                    "maximum": 10000
                  },
                  "language": {
                    "type": "string",
                    "enum": [
                      "en",
                      "de",
                      "ua"
                    ],
                    "example": "en",
                    "description": "The user's preferred language for communication and system notifications(optional)"
                  },
                  "avatarUrl": {
                    "type": "string",
                    "format": "binary",
                    "example": "https://example.com/avatar.jpg",
                    "description": "The URL for the user's new avatar image (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User information successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User information updated successfully!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Unauthorized - Token is missing or invalid. Make sure to provide a valid bearer token in the Authorization header.",
            "$ref": "#/components/responses/401_expiredToken"
          },
          "404": {
            "description": "User not found - The user you are trying to update does not exist.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users-count": {
      "get": {
        "tags": [
          "Common"
        ],
        "summary": "Get the total number of users",
        "operationId": "getStartUserCount",
        "description": "Retrieve the total number of users from the database. **Important:** A valid access token is required to access this endpoint.\n",
        "responses": {
          "200": {
            "description": "Total number of users successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Number of users in the database 100'"
                    },
                    "totalUser": {
                      "type": "integer",
                      "example": 42
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unable to process the request.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Create a new water intake record",
        "operationId": "createWater",
        "description": "This endpoint allows a user to create a new water intake record, specifying the amount, the date of intake, and the current daily water norm. A valid user ID is required.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Water intake data to be created",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount",
                  "date",
                  "currentDailyNorm"
                ],
                "properties": {
                  "amount": {
                    "type": "number",
                    "example": 250,
                    "description": "The amount of water consumed in milliliters.",
                    "minimum": 50
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-11-26T15:30:45",
                    "description": "The date and time when the water was consumed.",
                    "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created a water record!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a water record!"
                    },
                    "data": {
                      "type": "array",
                      "description": "creating a water record.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "674c3649bc0f53cead7b8351",
                            "description": "Water id (must be a valid ObjectId)."
                          },
                          "date": {
                            "type": "string",
                            "description": "The date for which water records are aggregated.",
                            "example": "2024-11-26T15:30:45"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Total amount of water consumed on the specific day in milliliters.",
                            "example": 2500
                          },
                          "currentDailyNorm": {
                            "type": "number",
                            "example": 2000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing parameters in the request body",
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Invalid or expired access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired access token"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/water/{waterId}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update a water intake record by ID",
        "operationId": "updateWaterById",
        "description": "This endpoint allows you to update an existing water intake record based on the provided water ID. A valid water ID is required, and you must provide the data to update.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "waterId",
            "required": true,
            "description": "The unique identifier of the water intake record (ObjectId).",
            "schema": {
              "type": "string",
              "pattern": "^[0-9a-fA-F]{24}$",
              "example": "60c72b2f9b1d8e6b6d2e5f53"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "example": 50,
                    "description": "The amount of water consumed in milliliters(optional)."
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2024-11-26T15:30:45",
                    "description": "The date and time when the water was consumed(optional)."
                  },
                  "currentDailyNorm": {
                    "type": "number",
                    "example": 2000,
                    "description": "The current daily water intake norm(optional)."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated the water intake record",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the water record!"
                    },
                    "data": {
                      "type": "array",
                      "description": "response after data update",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "674c3649bc0f53cead7b8351",
                            "description": "Water id (must be a valid ObjectId)."
                          },
                          "date": {
                            "type": "string",
                            "description": "The date for which water records are aggregated.",
                            "example": "2024-11-26T15:30:45"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Total amount of water consumed on the specific day in milliliters.",
                            "example": 2500
                          },
                          "currentDailyNorm": {
                            "type": "number",
                            "example": 2000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing parameters in the request body",
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Invalid or expired access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired access token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Water record not found",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete a water intake record by ID",
        "operationId": "deleteWaterById",
        "description": "This endpoint allows you to delete a water intake record based on the provided water ID. A valid water ID is required.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "waterId",
            "required": true,
            "description": "The unique identifier of the water intake record (ObjectId).",
            "schema": {
              "type": "string",
              "example": "60c72b2f9b1d8e6b6d2e5f53"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the water intake record"
          },
          "400": {
            "description": "Bad Request - Invalid water ID format",
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Invalid or expired access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired access token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Water record not found",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal Server Error",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/water/day/{date}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Retrieve daily water intake records",
        "operationId": "getWaterPerDay",
        "description": "This endpoint allows you to retrieve all water intake records for a specific day. A valid date and authentication token are required.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "date",
            "required": true,
            "description": "The date for which to retrieve water intake records (ISO format, e.g., 2024-11-29).",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-11-29"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved daily water records!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved daily water records!"
                    },
                    "data": {
                      "type": "array",
                      "description": "received water data for a month .",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "674c3649bc0f53cead7b8351",
                            "description": "Water id (must be a valid ObjectId)."
                          },
                          "date": {
                            "type": "string",
                            "description": "The date for which water records are aggregated.",
                            "example": "2024-11-26T15:30:45"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Total amount of water consumed on the specific day in milliliters.",
                            "example": 2500
                          },
                          "currentDailyNorm": {
                            "type": "number",
                            "example": 2000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing parameters in the request.",
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Invalid or expired access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired access token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No water records found for the specified date.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/water/month/{date}": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Retrieve monthly water intake records",
        "operationId": "getWaterPerMonth",
        "description": "This endpoint allows you to retrieve all water intake records for a specific month. A valid date (ISO format) and authentication token are required.\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "date",
            "required": true,
            "description": "The date representing the month to retrieve water intake records for (ISO format, e.g., 2024-11-01).",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2024-11-01"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved monthly water records!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved monthly water records!"
                    },
                    "data": {
                      "type": "array",
                      "description": "received water data for a month.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "example": "674c3649bc0f53cead7b8351",
                            "description": "Water id (must be a valid ObjectId)."
                          },
                          "date": {
                            "type": "string",
                            "description": "The date for which water records are aggregated.",
                            "example": "2024-11-26T15:30:45"
                          },
                          "amount": {
                            "type": "number",
                            "description": "Total amount of water consumed on the specific day in milliliters.",
                            "example": 2500
                          },
                          "currentDailyNorm": {
                            "type": "number",
                            "example": 2000
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid or missing parameters in the request.",
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Invalid or expired access token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid or expired access token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - No water records found for the specified month.",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "description": "Internal Server Error - Something went wrong on the server side.",
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request - Invalid or missing parameters",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad request, invalid or missing parameters"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Element not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Element not found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Email already in use",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email already in use"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              }
            }
          }
        }
      },
      "401_invalidDates": {
        "description": "Invalid credentials",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Invalid credentials"
                }
              }
            }
          }
        }
      },
      "401_sessionNotFound": {
        "description": "Invalid or expired access token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Invalid or expired access token"
                }
              }
            }
          }
        }
      },
      "401_expiredToken": {
        "description": "Invalid or expired access token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Invalid or expired access token"
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "61e9f1f3e7b45c001ddc2e85",
            "description": "Unique identifier of the user"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "description": "Name of the user"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "User's email address"
          },
          "gender": {
            "type": "string",
            "enum": [
              "woman",
              "man"
            ],
            "example": "woman",
            "description": "Gender of the user"
          },
          "weight": {
            "type": "number",
            "minimum": 0,
            "example": 70,
            "description": "User's weight in kilograms"
          },
          "activeTime": {
            "type": "integer",
            "minimum": 0,
            "example": 120,
            "description": "User's active time in minutes"
          },
          "currentDailyNorm": {
            "type": "integer",
            "minimum": 50,
            "maximum": 5000,
            "example": 1500,
            "description": "Daily water intake norm in milliliters"
          },
          "avatarUrlLocal": {
            "type": "string",
            "format": "binari",
            "example": "https://example.com/avatar.jpg",
            "description": "URL of the user's avatar"
          },
          "languages": {
            "type": "string",
            "enum": [
              "en",
              "de",
              "ua"
            ],
            "example": "en",
            "description": "Preferred language of the user"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-11-28T12:34:56Z",
            "description": "Timestamp of user creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-11-28T15:45:23Z",
            "description": "Timestamp of last update to the user"
          }
        },
        "required": [
          "id",
          "email",
          "gender",
          "currentDailyNorm",
          "createdAt",
          "updatedAt"
        ]
      }
    }
  }
}